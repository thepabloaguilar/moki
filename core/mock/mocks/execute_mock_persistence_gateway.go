// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/google/uuid"
	"github.com/thepabloaguilar/moki/core/entities"
	"github.com/thepabloaguilar/moki/core/mock"
	"sync"
)

// Ensure, that ExecuteMockPersistenceGatewayMock does implement mock.ExecuteMockPersistenceGateway.
// If this is not the case, regenerate this file with moq.
var _ mock.ExecuteMockPersistenceGateway = &ExecuteMockPersistenceGatewayMock{}

// ExecuteMockPersistenceGatewayMock is a mock implementation of mock.ExecuteMockPersistenceGateway.
//
//	func TestSomethingThatUsesExecuteMockPersistenceGateway(t *testing.T) {
//
//		// make and configure a mocked mock.ExecuteMockPersistenceGateway
//		mockedExecuteMockPersistenceGateway := &ExecuteMockPersistenceGatewayMock{
//			GetHTTPOperationByProjectIDAndHTTPMethodAndRouteFunc: func(ctx context.Context, projectID uuid.UUID, httpMethod entities.HTTPMethod, route string) (entities.HTTPOperation, error) {
//				panic("mock out the GetHTTPOperationByProjectIDAndHTTPMethodAndRoute method")
//			},
//			GetProjectByIDFunc: func(ctx context.Context, projectID uuid.UUID) (entities.Project, error) {
//				panic("mock out the GetProjectByID method")
//			},
//		}
//
//		// use mockedExecuteMockPersistenceGateway in code that requires mock.ExecuteMockPersistenceGateway
//		// and then make assertions.
//
//	}
type ExecuteMockPersistenceGatewayMock struct {
	// GetHTTPOperationByProjectIDAndHTTPMethodAndRouteFunc mocks the GetHTTPOperationByProjectIDAndHTTPMethodAndRoute method.
	GetHTTPOperationByProjectIDAndHTTPMethodAndRouteFunc func(ctx context.Context, projectID uuid.UUID, httpMethod entities.HTTPMethod, route string) (entities.HTTPOperation, error)

	// GetProjectByIDFunc mocks the GetProjectByID method.
	GetProjectByIDFunc func(ctx context.Context, projectID uuid.UUID) (entities.Project, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetHTTPOperationByProjectIDAndHTTPMethodAndRoute holds details about calls to the GetHTTPOperationByProjectIDAndHTTPMethodAndRoute method.
		GetHTTPOperationByProjectIDAndHTTPMethodAndRoute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID uuid.UUID
			// HttpMethod is the httpMethod argument value.
			HttpMethod entities.HTTPMethod
			// Route is the route argument value.
			Route string
		}
		// GetProjectByID holds details about calls to the GetProjectByID method.
		GetProjectByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID uuid.UUID
		}
	}
	lockGetHTTPOperationByProjectIDAndHTTPMethodAndRoute sync.RWMutex
	lockGetProjectByID                                   sync.RWMutex
}

// GetHTTPOperationByProjectIDAndHTTPMethodAndRoute calls GetHTTPOperationByProjectIDAndHTTPMethodAndRouteFunc.
func (mock *ExecuteMockPersistenceGatewayMock) GetHTTPOperationByProjectIDAndHTTPMethodAndRoute(ctx context.Context, projectID uuid.UUID, httpMethod entities.HTTPMethod, route string) (entities.HTTPOperation, error) {
	callInfo := struct {
		Ctx        context.Context
		ProjectID  uuid.UUID
		HttpMethod entities.HTTPMethod
		Route      string
	}{
		Ctx:        ctx,
		ProjectID:  projectID,
		HttpMethod: httpMethod,
		Route:      route,
	}
	mock.lockGetHTTPOperationByProjectIDAndHTTPMethodAndRoute.Lock()
	mock.calls.GetHTTPOperationByProjectIDAndHTTPMethodAndRoute = append(mock.calls.GetHTTPOperationByProjectIDAndHTTPMethodAndRoute, callInfo)
	mock.lockGetHTTPOperationByProjectIDAndHTTPMethodAndRoute.Unlock()
	if mock.GetHTTPOperationByProjectIDAndHTTPMethodAndRouteFunc == nil {
		var (
			hTTPOperationOut entities.HTTPOperation
			errOut           error
		)
		return hTTPOperationOut, errOut
	}
	return mock.GetHTTPOperationByProjectIDAndHTTPMethodAndRouteFunc(ctx, projectID, httpMethod, route)
}

// GetHTTPOperationByProjectIDAndHTTPMethodAndRouteCalls gets all the calls that were made to GetHTTPOperationByProjectIDAndHTTPMethodAndRoute.
// Check the length with:
//
//	len(mockedExecuteMockPersistenceGateway.GetHTTPOperationByProjectIDAndHTTPMethodAndRouteCalls())
func (mock *ExecuteMockPersistenceGatewayMock) GetHTTPOperationByProjectIDAndHTTPMethodAndRouteCalls() []struct {
	Ctx        context.Context
	ProjectID  uuid.UUID
	HttpMethod entities.HTTPMethod
	Route      string
} {
	var calls []struct {
		Ctx        context.Context
		ProjectID  uuid.UUID
		HttpMethod entities.HTTPMethod
		Route      string
	}
	mock.lockGetHTTPOperationByProjectIDAndHTTPMethodAndRoute.RLock()
	calls = mock.calls.GetHTTPOperationByProjectIDAndHTTPMethodAndRoute
	mock.lockGetHTTPOperationByProjectIDAndHTTPMethodAndRoute.RUnlock()
	return calls
}

// GetProjectByID calls GetProjectByIDFunc.
func (mock *ExecuteMockPersistenceGatewayMock) GetProjectByID(ctx context.Context, projectID uuid.UUID) (entities.Project, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID uuid.UUID
	}{
		Ctx:       ctx,
		ProjectID: projectID,
	}
	mock.lockGetProjectByID.Lock()
	mock.calls.GetProjectByID = append(mock.calls.GetProjectByID, callInfo)
	mock.lockGetProjectByID.Unlock()
	if mock.GetProjectByIDFunc == nil {
		var (
			projectOut entities.Project
			errOut     error
		)
		return projectOut, errOut
	}
	return mock.GetProjectByIDFunc(ctx, projectID)
}

// GetProjectByIDCalls gets all the calls that were made to GetProjectByID.
// Check the length with:
//
//	len(mockedExecuteMockPersistenceGateway.GetProjectByIDCalls())
func (mock *ExecuteMockPersistenceGatewayMock) GetProjectByIDCalls() []struct {
	Ctx       context.Context
	ProjectID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID uuid.UUID
	}
	mock.lockGetProjectByID.RLock()
	calls = mock.calls.GetProjectByID
	mock.lockGetProjectByID.RUnlock()
	return calls
}
